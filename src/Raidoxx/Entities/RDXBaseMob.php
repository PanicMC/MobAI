<?php

namespace Raidoxx\Entities;

use pocketmine\entity\EntitySizeInfo;
use pocketmine\entity\Living;
use pocketmine\entity\Location;
use pocketmine\event\entity\EntityDamageEvent;
use pocketmine\inventory\ArmorInventory;
use pocketmine\item\Armor;
use pocketmine\item\Item;
use pocketmine\nbt\tag\CompoundTag;
use pocketmine\network\mcpe\convert\TypeConverter;
use pocketmine\network\mcpe\protocol\MobEquipmentPacket;
use pocketmine\network\mcpe\protocol\types\inventory\ContainerIds;
use pocketmine\network\mcpe\protocol\types\inventory\ItemStackWrapper;
use Raidoxx\Entities\IA\BaseIA;
use Raidoxx\Entities\inventory\RDXMobInventory;
use Raidoxx\Libs\pathfinder\setting\Settings;

class RDXBaseMob extends Living
{
    private EntitySizeInfo $sizeInfo;
    private string $name;
    private static string $networkId;
    private BaseIA $ia;

    public Temperament $temperament;
    private Atributes $atributes;
    private RDXMobInventory $inventory;
    private EnemyManager $enemy_manager;
    private EntityMoviment $entity_moviment;
    private CombatManager $combat_manager;
    private AttackManager $attack_manager;

    public function __construct(
        Location $location,
        EntitySizeInfo $sizeInfo,
        string $networkId,
        string $name,
        BaseIA $ia,
        Temperament $temperament,
        Atributes $atributes,
        Settings $settings,
        CompoundTag $nbt = null
    )
    {
        $this->ia = $ia;
        $this->sizeInfo = $sizeInfo;
        $this->name = $name;
        self::$networkId = $networkId;
        $this->temperament = $temperament;
        $this->atributes = $atributes;
        parent::__construct($location, $nbt);
        $this->enemy_manager = new EnemyManager($this);
        $this->entity_moviment = new EntityMoviment($this, $settings);
        $this->combat_manager = new CombatManager($this);
        $this->attack_manager = new AttackManager($this);
        $this->ia->init();
        $this->inventory = new RDXMobInventory($this);
        $this->setHealth($this->getAtributes()->getHealth());
    }

    public function onDeath(): void
    {
        $this->getWorld()->dropExperience($this->getPosition(), $this->getAtributes()->getXp());
        parent::onDeath(); // TODO: Change the autogenerated stub
    }

    public function attack(EntityDamageEvent $source): void
    {
        $this->ia->attack($source);
        parent::attack($source);
    }

    public function getAtributes(): Atributes
    {
        return $this->atributes;
    }

    public function getInventory(): RDXMobInventory
    {
        return $this->inventory;
    }

    public function getEnemyManager(): EnemyManager
    {
        return $this->enemy_manager;
    }

    public function getTemperamentManage(): Temperament
    {
        return $this->temperament;
    }

    public function getEntityMoviment(): EntityMoviment
    {
        return $this->entity_moviment;
    }

    public function getCombatManager(): CombatManager
    {
        return $this->combat_manager;
    }

    public function getAttackManager(): AttackManager
    {
        return $this->attack_manager;
    }

    public function entityBaseTick(int $tickDiff = 10): bool
    {
        if($this->isClosed() or !$this->isAlive()){
            return false;
        }
        $this->ia->update();
        return parent::entityBaseTick($tickDiff);
    }


    protected function getInitialSizeInfo(): EntitySizeInfo
    {
        return $this->sizeInfo;
    }

    public static function getNetworkTypeId(): string
    {
        return self::$networkId;
    }

    public function getName(): string
    {
        return $this->name;
    }

    public function getIA(): BaseIA
    {
        return $this->ia;
    }

    public function setArmor(Armor $armor): void
    {
        $inventory = $this->getArmorInventory();

        switch ($armor->getArmorSlot()) {
            case ArmorInventory::SLOT_HEAD:
                $inventory->setHelmet($armor);
                break;
            case ArmorInventory::SLOT_CHEST:
                $inventory->setChestplate($armor);
                break;
            case ArmorInventory::SLOT_LEGS:
                $inventory->setLeggings($armor);
                break;
            case ArmorInventory::SLOT_FEET:
                $inventory->setBoots($armor);
                break;
        }
    }

    public function addItemInHand(Item $item): void
    {
        if($this->inventory->canAddItem($item)){
            $this->inventory->addItem($item);
            $typeConverter = new TypeConverter();
            $itemStack = $typeConverter->coreItemStackToNet($item);

            $pk = MobEquipmentPacket::create(
                $this->getId(),
                ItemStackWrapper::legacy($itemStack),
                0,
                0,
                ContainerIds::INVENTORY
            );

            foreach ($this->getViewers() as $viewer) {
                $viewer->getNetworkSession()->sendDataPacket($pk);
            }
        }
    }
}