<?php

namespace Raidoxx\Entities\monsters;

use pocketmine\entity\EntitySizeInfo;
use pocketmine\entity\Location;
use pocketmine\event\entity\EntityDamageByEntityEvent;
use pocketmine\event\entity\EntityDamageEvent;
use pocketmine\nbt\tag\CompoundTag;
use pocketmine\network\mcpe\protocol\PlaySoundPacket;
use pocketmine\network\mcpe\protocol\types\entity\EntityIds;
use pocketmine\network\mcpe\protocol\types\entity\EntityMetadataFlags;
use pocketmine\player\Player;
use pocketmine\world\particle\EndermanTeleportParticle;
use pocketmine\world\Position;
use Raidoxx\Entities\Atributes;
use Raidoxx\Entities\IA\types\ComplexIA;
use Raidoxx\Entities\IA\Utils\RandomPositions;
use Raidoxx\Entities\RDXBaseMob;
use Raidoxx\Entities\Temperament;
use Raidoxx\Libs\pathfinder\setting\rule\DefaultPathRules;
use Raidoxx\Libs\pathfinder\setting\Settings;

class Enderman extends RDXBaseMob
{
    public static string $networkId = EntityIds::ENDERMAN;
    public float $width = 0.6;
    public float $height = 2.9;
    public float $eyeHeight = 2.80;

    use RandomPositions;

    public function getName(): string
    {
        return "Enderman";
    }

    public function __construct(Location $location, CompoundTag $nbt = null)
    {
        parent::__construct(
            $location,
            new EntitySizeInfo($this->height, $this->width, $this->eyeHeight),
            self::$networkId,
            $this->getName(),
            new ComplexIA($this),
            new Temperament(Temperament::NEUTRAL),
            new Atributes(10, 8, 30, 2,10, 5, 40),
            Settings::get()->setPathRules(new DefaultPathRules()),
            new CompoundTag()
        );
        $this->getAtributes()->setTeleporter(true);
        $this->getEnemyManager()->addEnmies(Player::class);
    }

    public function attack(EntityDamageEvent $source): void
    {
        if($source instanceof EntityDamageByEntityEvent){
            $damager = $source->getDamager();
            $this->getAtributes()->setSpeed(18);
            $this->getNetworkProperties()->setGenericFlag(EntityMetadataFlags::ANGRY, true);
            $this->teleport($this->getRandomPositionByEntity($this));
            $this->getWorld()->addParticle($this->getPosition(), new EndermanTeleportParticle());

            if($damager instanceof Player){
               $this->makeAngry();
            }
        }
        parent::attack($source); // TODO: Change the autogenerated stub
    }

    public function setAngry(bool $value): void
    {
        $this->getNetworkProperties()->setGenericFlag(EntityMetadataFlags::ANGRY, $value);
    }

    public function makeAngry(): void
    {
        $this->setAngry(true);
        $this->teleportTo();
        $pk = new PlaySoundPacket;
        $pk->soundName = "mob.endermen.stare";
        $pk->x = (int)$this->getPosition()->getX();
        $pk->y = (int)$this->getPosition()->getY();
        $pk->z = (int)$this->getPosition()->getZ();
        $pk->volume = 10;
        $pk->pitch = 1;
        foreach ($this->getViewers() as $player){
            $player->getNetworkSession()->sendDataPacket($pk);
        }
    }

    public function teleportTo(Position $position = null): void
    {
        if($position !== null){
            $this->teleport($position);
        }else{
            $this->teleport($this->getRandomPositionByEntity($this));
        }
        $pk = new PlaySoundPacket;
        $pk->soundName = "mob.endermen.portal";
        $pk->x = (int)$this->getPosition()->getX();
        $pk->y = (int)$this->getPosition()->getY();
        $pk->z = (int)$this->getPosition()->getZ();
        $pk->volume = 10;
        $pk->pitch = 1;
        foreach ($this->getViewers() as $player){
            $player->getNetworkSession()->sendDataPacket($pk);
        }
        $this->getWorld()->addParticle($this->getPosition(), new EndermanTeleportParticle());
    }

    public function entityBaseTick(int $tickDiff = 10): bool
    {
        if(mt_rand(1, 500) <= 5){
            $this->teleportTo();
        }
        return parent::entityBaseTick($tickDiff); // TODO: Change the autogenerated stub
    }
}